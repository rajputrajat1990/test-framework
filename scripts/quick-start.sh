#!/bin/bash

# Quick Start Script for Confluent Cloud Terraform Test Framework
# This script helps users get started with minimal configuration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo -e "${BLUE}üöÄ Confluent Cloud Terraform Test Framework - Quick Start${NC}"
echo "=============================================================="
echo ""
echo -e "${CYAN}This script will help you set up the framework for first use.${NC}"
echo ""

# Function to prompt for input with default
prompt_with_default() {
    local prompt="$1"
    local default="$2"
    local var_name="$3"
    
    if [[ -n "$default" ]]; then
        read -p "$prompt [$default]: " input
        eval "$var_name=\"\${input:-$default}\""
    else
        read -p "$prompt: " input
        eval "$var_name=\"$input\""
    fi
}

# Function to prompt for sensitive input
prompt_sensitive() {
    local prompt="$1"
    local var_name="$2"
    
    echo -n "$prompt: "
    read -s input
    echo ""
    eval "$var_name=\"$input\""
}

# Check if configuration already exists
if [[ -f "$PROJECT_ROOT/config/environments/local.yaml" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Local configuration already exists.${NC}"
    read -p "Do you want to overwrite it? (y/N): " overwrite
    if [[ "$overwrite" != "y" && "$overwrite" != "Y" ]]; then
        echo "Using existing configuration."
        USE_EXISTING=true
    else
        USE_EXISTING=false
    fi
else
    USE_EXISTING=false
fi

if [[ "$USE_EXISTING" == "false" ]]; then
    echo -e "${YELLOW}üìù Please provide your Confluent Cloud configuration:${NC}"
    echo ""

    # Collect Confluent Cloud information
  prompt_with_default "Confluent Cloud Organization ID (UUID, e.g., 52445b30-3393-47c5-b174-9a856fc7ca26)" "" "ORG_ID"
    prompt_with_default "Confluent Cloud Environment ID (e.g., env-123456)" "" "ENV_ID"
    prompt_with_default "Confluent Cloud Cluster ID (e.g., lkc-abcdef)" "" "CLUSTER_ID"
    prompt_with_default "Cloud Provider (aws/gcp/azure)" "aws" "CLOUD_PROVIDER"
    prompt_with_default "Region (e.g., us-west-2)" "us-west-2" "REGION"

    echo ""
    echo -e "${YELLOW}üîê API Credentials (will be stored in environment variables):${NC}"
    prompt_sensitive "Confluent Cloud API Key" "API_KEY"
    prompt_sensitive "Confluent Cloud API Secret" "API_SECRET"

    echo ""
    echo -e "${YELLOW}üë§ User Configuration:${NC}"
    prompt_with_default "Your email for RBAC testing (e.g., user@example.com)" "" "USER_EMAIL"

    # Create local environment configuration
    echo -e "${YELLOW}üìÅ Creating local environment configuration...${NC}"
    
    cat > "$PROJECT_ROOT/config/environments/local.yaml" << EOF
# Local Environment Configuration
# Generated by quick-start script

environment:
  name: "local"
  description: "Local development and testing environment"
  
confluent_cloud:
  organization_id: "$ORG_ID"
  environment_id: "$ENV_ID"
  cluster_id: "$CLUSTER_ID"
  region: "$REGION"
  cloud: "$CLOUD_PROVIDER"

testing:
  execution_mode: "apply"
  cleanup_policy: "always"
  resource_prefix: "local-test"
  timeout_minutes: 15
  
module_overrides:
  kafka_topic:
    parameters:
      partitions: 1
      topic_config:
        retention.ms: "86400000"  # 1 day
        
  s3_source_connector:
    enabled: false
    
  rbac_cluster_admin:
    parameters:
      principal: "User:$USER_EMAIL"

  rbac_topic_access:
    parameters:
      principal: "User:$USER_EMAIL"

validation:
  strict_mode: false
  skip_api_verification: false
  allow_partial_failures: true
  
logging:
  level: "INFO"
  include_sensitive: false
  log_file: "local-test.log"

limits:
  max_topics: 3
  max_connectors: 1
  max_role_bindings: 5
EOF

    echo -e "${GREEN}‚úÖ Local environment configuration created${NC}"

    # Create .env file
    echo -e "${YELLOW}üìÑ Creating environment variables file...${NC}"
    
    cat > "$PROJECT_ROOT/.env" << EOF
# Confluent Cloud API Credentials
# Source this file before running tests: source .env
export CONFLUENT_CLOUD_API_KEY="$API_KEY"
export CONFLUENT_CLOUD_API_SECRET="$API_SECRET"
export CONFLUENT_ORGANIZATION_ID="$ORG_ID"
export CONFLUENT_ENVIRONMENT_ID="$ENV_ID"
export CONFLUENT_CLUSTER_ID="$CLUSTER_ID"

# Optional: For connector testing
# export TEST_S3_BUCKET="your-test-bucket"
# export AWS_ACCESS_KEY_ID="your-aws-key"
# export AWS_SECRET_ACCESS_KEY="your-aws-secret"

# Optional: For Kafka API access
# export CONFLUENT_KAFKA_API_KEY="your-kafka-api-key"
# export CONFLUENT_KAFKA_API_SECRET="your-kafka-api-secret"

# User configuration
export TEST_SERVICE_ACCOUNT="User:$USER_EMAIL"
EOF

    chmod 600 "$PROJECT_ROOT/.env"
    echo -e "${GREEN}‚úÖ Environment variables file created (.env)${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Remember to source the .env file: source .env${NC}"
fi

# Source the environment variables
if [[ -f "$PROJECT_ROOT/.env" ]]; then
    echo -e "${YELLOW}üîß Loading environment variables...${NC}"
    source "$PROJECT_ROOT/.env"

  # Backfill missing Organization ID if using existing .env
  if [[ -z "$CONFLUENT_ORGANIZATION_ID" ]]; then
    echo -e "${YELLOW}‚ÑπÔ∏è  CONFLUENT_ORGANIZATION_ID is not set in your .env.${NC}"
    prompt_with_default "Confluent Cloud Organization ID (UUID, e.g., 52445b30-3393-47c5-b174-9a856fc7ca26)" "" "ORG_ID"
    if [[ -n "$ORG_ID" ]]; then
      echo "export CONFLUENT_ORGANIZATION_ID=\"$ORG_ID\"" >> "$PROJECT_ROOT/.env"
      export CONFLUENT_ORGANIZATION_ID="$ORG_ID"
      echo -e "${GREEN}‚úÖ Added CONFLUENT_ORGANIZATION_ID to .env${NC}"
    fi
  fi
fi

# Run setup
echo -e "${YELLOW}üõ†Ô∏è  Running framework setup...${NC}"
cd "$PROJECT_ROOT"

if ./scripts/setup.sh; then
    echo -e "${GREEN}‚úÖ Framework setup completed successfully${NC}"
else
    echo -e "${RED}‚ùå Framework setup failed${NC}"
    exit 1
fi

echo ""
echo -e "${BLUE}üéâ Quick Start Complete!${NC}"
echo "=========================="
echo ""
echo -e "${GREEN}Next steps:${NC}"
echo ""
echo -e "${CYAN}1. Test basic functionality:${NC}"
echo "   ./scripts/test-runner.sh --env local --module kafka_topic"
echo ""
echo -e "${CYAN}2. Run all basic tests:${NC}"
echo "   ./scripts/test-runner.sh --env local --plan basic"
echo ""
echo -e "${CYAN}3. Check what would run (dry-run):${NC}"
echo "   ./scripts/test-runner.sh --env local --plan basic --dry-run"
echo ""
echo -e "${CYAN}4. View logs:${NC}"
echo "   tail -f logs/*.log"
echo ""
echo -e "${YELLOW}üìö Documentation:${NC}"
echo "   - User Guide: docs/user-guide.md"
echo "   - Architecture: docs/architecture.md"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  Important Notes:${NC}"
echo "   - Always source .env before running tests: source .env"
echo "   - Your credentials are stored in .env (git ignored)"
echo "   - Local environment uses minimal resources for testing"
echo "   - To find your Organization ID via CLI: confluent organization list"
echo ""

cd "$PROJECT_ROOT"
